import os
import pandas as pd
from dbfread import DBF

# Function to calculate cumulative and average values of a column
def calculate_cumulative_average(column_values):
    cumulative_sum = column_values.cumsum()
    average_values = column_values.expanding().mean()
    return cumulative_sum, average_values

# Directory containing the DBF files
directory = r'F:\Paper_Final_1\Erosion_Yield\Ganga_SW\Ganga_Results\Stream\Erosion_Results'

# List all the DBF files in the directory
dbf_files = [file for file in os.listdir(directory) if file.lower().endswith('.dbf')]

# Initialize an empty DataFrame to store the results
results_df = pd.DataFrame(columns=['Sub-Watershed', 'Cumulative ERO_YLD_TO', 'Average ERO_YLD_TO'])

# Loop through each DBF file and extract the required data
for dbf_file in dbf_files:
    dbf_file_path = os.path.join(directory, dbf_file)
    
    # Read the DBF file
    table = DBF(dbf_file_path)
    
    # Extract the 'ERO_YLD_TO' column values
    ero_yld_to_values = [record['ERO_YLD_TO'] for record in table]
    
    # Calculate cumulative and average values
    cumulative_ero_yld_to, average_ero_yld_to = calculate_cumulative_average(pd.Series(ero_yld_to_values))
    
    # Extract the Sub-Watershed name (assuming the file name is in the format 'SW1.dbf')
    sub_watershed = dbf_file[:-4]  # Remove the '.dbf' extension
    
#     # Append the data to the results DataFrame
#     results_df = results_df.append({
#         'Sub-Watershed': sub_watershed,
#         'Cumulative ERO_YLD_TO': cumulative_ero_yld_to.iloc[-1],  # Last cumulative value
#         'Average ERO_YLD_TO': average_ero_yld_to.iloc[-1]  # Last average value
#     }, ignore_index=True)

    # Append the data to the results DataFrame only if there are values in the Series
    if not cumulative_ero_yld_to.empty and not average_ero_yld_to.empty:
        results_df = results_df.append({
            'Sub-Watershed': sub_watershed,
            'Cumulative ERO_YLD_TO': cumulative_ero_yld_to.iloc[-1],  # Last cumulative value
            'Average ERO_YLD_TO': average_ero_yld_to.iloc[-1]  # Last average value
        }, ignore_index=True)

# Save the results to an Excel file
output_file = os.path.join(directory, 'ERO_YLD_TO_Results.xlsx')
results_df.to_excel(output_file, index=False, engine='openpyxl')

print("Results saved to:", output_file)
